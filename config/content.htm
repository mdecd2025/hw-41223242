<h1>About</h1>
<p>課程名稱: 協同產品設計實習 - Collaborative Product Design Practice</p>
<p>學員作業網站: <a href="https://mdecd2025.github.io/hw-41223242">https://mdecd2025.github.io/hw-41223242</a></p>
<p>學員作業倉儲: <a href="https://github.com/mdecd2025/hw-41223242">https://github.com/mdecd2025/hw-41223242</a></p>
<hr/>
<p>課程代號: cd2025</p>
<p>Teams 線上教學:</p>
<p style="padding-left: 30px;">以 "學號@nfu.edu.tw" 登入<span> </span><a href="https://login.microsoftonline.com/">https://login.microsoftonline.com/</a><span> </span>Office 365</p>
<p style="padding-left: 30px;">Teams 團隊代碼: <span>p5z4eku</span></p>
<hr/>
<p>課程評分:</p>
<p style="padding-left: 30px;">Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單</p>
<p style="padding-left: 30px;">Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單</p>
<p style="padding-left: 30px;">Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單</p>
<h2>repo</h2>
<p></p>
<h1>Task</h1>
<p></p>
<h2>task1</h2>
<p><span>修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat,關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具</span></p>
<p><span></span></p>
<p><img alt="" height="297" src="/images/螢幕擷取畫面 2025-03-04 094147.png" width="567"/></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/S53CyA2hR3g" width="560"></iframe></p>
<h2>task2</h2>
<h3>List</h3>
<p><a href="https://mdecd2025.github.io/hw-41223242/content/Brython.html?src=https://gist.githubusercontent.com/41223242/9a8b1c655df46dde911eaead1b8fe335/raw/342a765602dd16cee7ddd6dde727c2bb46727452/G2%2520list">G2 list</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DDwdlPmtfR0" width="560"></iframe></p>
<h2>task3</h2>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kKHQZUX2-A0" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zUrdCh4exeE" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/NeI859BNyZY" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XRGYQRsqKVQ" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gAp6D1r9pQY" width="560"></iframe></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5JA51krBNAg" width="560"></iframe></p>
<h2>task4</h2>
<h3>W4</h3>
<p>webots練習四連桿操作後的最終結果</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7j2FpzrTf1Q" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<h3>w6</h3>
<p></p>
<h2>task5</h2>
<h3>w7</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7wlDvHXXvlo" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/Jomr6FsqIxo" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/2ZbJrQIFh-o" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/plr1ycE8EzI" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4quyx-A0Xq8" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/6VVc2LBrmow" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/RS7C5kfRRR8" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/7rsNJzAbylc" width="560"></iframe></p>
<p></p>
<p><br/><br/><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/D55UT6iC3ro" width="560"></iframe></p>
<p></p>
<p></p>
<h2>task6</h2>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>Homework</h1>
<p>作業 (30%)</p>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">part1:</p>
<p style="padding-left: 60px;">請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置:</p>
<p style="padding-left: 90px;">下載 <a href="http://229.cycu.org/portable_wcm2025.7z">portable_wcm2025.7z</a> (330MB, 解開壓縮後 1.4GB)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a.7z">Webots_2025a.7z</a> (1.5 GB, 解開後約為 2.9GB, 可單獨運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Webots_2025a_web.7z">Webots_2025a_web.7z</a> (171 MB, 解開壓縮後約為 1GB, 必須連網運作)</p>
<p style="padding-left: 90px;"><a href="http://229.cycu.org/Blender4.2.7z">Blender4.2.7z</a></p>
<p style="padding-left: 30px;">part2:</p>
<p style="padding-left: 60px;">請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 60px;">base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec.</p>
<p style="padding-left: 30px;">part3:</p>
<p style="padding-left: 60px;">模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2025_hw1_demo.7z">cd2025_hw1_demo.7z</a></p>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p style="padding-left: 30px;">各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p style="padding-left: 60px;"><a href="/downloads/fourbar_slvs.7z">fourbar_slvs.7z</a></p>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p style="padding-left: 30px;">請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 (<a href="https://www.youtube.com/watch?v=LloG_Jn_TI0&amp;t=51s">參考影片</a>)後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統.</p>
<p style="padding-left: 30px;">參考資料:</p>
<p>參考資料:</p>
<p style="padding-left: 30px;"><a href="/downloads/fourbar_ball_throwing_linkage.slvs">fourbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><a href="/downloads/sixbar_ball_throwing_linkage.slvs">sixbar_ball_throwing_linkage.slvs</a></p>
<p style="padding-left: 30px;"><img alt="" height="264" src="/images/fourbar_ball_throwing_linkage.gif" width="400"/></p>
<h2>HW1</h2>
<p>HW1 (5%): <span style="background-color: #ffff00;">建立由 Box 組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/X90lGSDbvgk" width="560"></iframe></p>
<p><a href="/downloads/四連桿(練習.7z">webots fourbar.7z</a></p>
<p><a href="/downloads/fourbar_controller.7z">fourbar_controller.7z</a></p>
<p><a href="/downloads/fourbar1.zip">fourbar1.zip</a></p>
<p>在進行操作練習時遇到多次問題，當無法自行解決時，我透過詢問 ChatGPT 並參考同學的操作影片，逐步修正錯誤，最終順利完成操作。</p>
<p></p>
<h2>HW2</h2>
<p>HW2 (5%): <span style="background-color: #ffff00;">建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/kKHQZUX2-A0" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/zUrdCh4exeE" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/NeI859BNyZY" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XRGYQRsqKVQ" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gAp6D1r9pQY" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/5JA51krBNAg" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_NQgPZFOmgM" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/fourbar2.zip">fourbar2.zip</a></p>
<p></p>
<p>HW2的內容操作與HW1的操作是差不多的，不同的地方在於要先將零件用solvespace繪製，再將零件進行組裝存成stl，stl轉成obj，開啟webots將零件一個一個加入進webots中，但整體操作起來是比HW1簡單一點。</p>
<p></p>
<h2>HW3</h2>
<p>HW3 (20%):<span style="background-color: #ffff00;">建立 Webots 桌上籃球遊戲機模擬系統</span></p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號</p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/cw-X_coTrKg" width="560"></iframe></p>
<p>在製作的過程中因一直在模擬時發生問題，所以將floor(地板）和外牆與籃球框移除重新製作（重新製作的過程影片於影片中的39:26開始）</p>
<p></p>
<p><a href="/downloads/basketball.zip">basketball.zip</a></p>
<p></p>
<p>HW3的做法與HW2的做法類似，都是先在solvespace 把零件繪製完成，再將組合後的零件存成stl，將stl的檔案轉換成obj 後，開啟webots 建立Robot，在Robot下加入solid(base)和兩個hingejoint ，剩下的做法與HW2相似加入零件與修改內部數值，不一樣的地方在於需要多加ball與籃球框和地板，我覺得在整體的實際操作上比HW2還要難上一點，花了蠻多的時間才成功做出來。</p>
<p></p>
<p></p>
<p></p>
<p></p>
<p></p>
<h1>Midterm</h1>
<p>本課程所繳交的期中成績為學員自評之學習期望成績.</p>
<p>期中考週的自評期望成績繳交流程:</p>
<ol>
<li>整理先前所完成的各週的進度、作業網頁內容以及心得</li>
<li>拍攝期中自評影片, 上傳至 Youtube 後, 以"<span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號</span>"為影片標題後嵌入本頁面中</li>
<li>回填期中自評表單</li>
<li>上傳學員期中成績</li>
</ol>
<p>各週進度:<span>python313、小組名單list、四連桿繪製、投籃機繪製</span></p>
<p>各週網頁內容:<a href="https://mdecd2025.github.io/hw-41223242/content/task1.html">python 313</a>、<a href="https://mdecd2025.github.io/hw-41223242/content/List.html">List</a>、<a href="https://mdecd2025.github.io/hw-41223242/content/task4.html">四連桿</a>、<a href="https://mdecd2025.github.io/hw-41223242/content/w7.html">投籃機</a></p>
<p>期中心得:我覺得在這學期學的內容比較困難，在進度都落後老師教的，需要花更多的時間多加練習，尤其是在webots要更努力。</p>
<p>期中自評影片:</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/lAnels3NzIk" width="560"></iframe></p>
<p></p>
<p style="padding-left: 30px;"></p>
<h1>Exam</h1>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p style="padding-left: 30px;">各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景 </p>
<p style="padding-left: 30px;">各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制.</p>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p style="padding-left: 30px;">各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站.</p>
<p style="padding-left: 30px;">協同分組方式:</p>
<ol>
<li>分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁.</li>
<li>分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁.</li>
</ol>
<h2>Exam1</h2>
<p>Exam1 (10%): 建立 Webots 基本物件模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號</p>
<p></p>
<p></p>
<p>1.先加入Robot<br/>2.在Robot下的children 加入Solid（名稱改為base)再加入兩個HingeJoint(一個名稱改為joint1另一個名稱改為joint4)<br/>3.在base下的children加入Shape<br/>4.在Shape下的geometry加入Box大小為1、0.1、0.1、appearance下修改顏色（先暫時用成白色）<br/>5.在joint1下的endPoint加入Solid（並改名為link1)<br/>6.在Solid下的children加入Pose<br/>7.在Pose下的children加入Shape<br/>8.在Shape下的geometry加入Box大小為0.4、0.1、0.1、appearance下修改顏色，顏色改為紅色<br/>9.在Pose下的translation更改數值0.2、0、0<br/>10.在Solid下的translation更改數值-0.5、0、0.1<br/>11.修改Solid(link1)下的rotation (學號後兩碼42，42degree=0.73303829rad)<br/>12.在Solid(link1)下的bounding加入Pose，在children下加入Box，修改尺寸0.4、0.1、0.1，並修改translation 0.2、0、0<br/>13.開啟physics<br/>14.在Solid(link1)下的children加入HingeJoint(與Pose同一階)，並改名為joint2<br/>15.在joint1下的endPoint加入Solid（並改名為link2)<br/>16.在Solid下的children加入兩個Pose<br/>17.在Pose下的children加入Shape<br/>18.在Shape下的geometry加入Box大小為0.6、0.1、0.1、appearance下修改顏色，顏色改為綠色<br/>19.在Pose下的translation更改數值0.3、0、0<br/>20.在Pose下的children加入Shape<br/>21.在Shape下的geometry加入Box大小為0.1、0.3、0.1、appearance下修改顏色，顏色改為綠色，並更改Pose下的translation0.3，0.15，0<br/>22.在Solid下的translation更改數值0.4、0、0.1<br/>23.修改Solid(link2)下的rotation (由solvespace繪圖，推算出角度為160.2，180-160.2=19.8，19.8degree=0.34557519rad)<br/>24.在Solid(link2)下的bounding加入Pose，在children下加入Box，修改尺寸0.6、0.1、0.1，並修改translation 0.3、0、0<br/>25.開啟physics<br/>26.在Solid(link2)下的children加入HingeJoint(與Pose同一階)，並改名為joint3<br/>27.在joint3下的endPoint加入Solid（並改名為link3)<br/>28.在Solid下的children加入Pose<br/>29.在Pose下的children加入Shape<br/>30.在Shape下的geometry加入Box大小為0.9、0.1、0.1、appearance下修改顏色，顏色改為藍色<br/>31.在Pose下的translation更改數值0.45、0、0<br/>32.在Solid下的translation更改數值0.6、0、-0.1<br/>33.修改Solid(link3)下的rotation (由solvespace繪圖，推算出角度為55.94，180-55.96=124.04，124.04degree=2.1649064rad)<br/>34.在Solid(link3)下的bounding加入Pose，在children下加入Box，修改尺寸0.9、0.1、0.1，並修改translation 0.45、0、0<br/>35.開啟physics<br/>36.在joint1下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor-0.5、0、0<br/>37.在joint1下的device加入RotationalMotor，並將name改成motor<br/>38.在joint2下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.4、0、0<br/>39.在joint3下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.6、0、0<br/>40.在joint4下的endPoint加入SolidReference，並選擇link3<br/>41.在joint4下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.5、0、0<br/>42.到Robot下的controller選擇fourbar controller<br/>43將base改成透明<br/>44.按下開始<br/>45.完成</p>
<p></p>
<p>exam1在整體的操作上與HW1是差不多的，建立box與修改顏色、內部的數值，只有在link2的部分圖形是不一樣的，另外還要注意紅色桿（link1）的起始角度要設定為學號後兩碼，另外在base的部分需要將base隱藏，整體的難度我覺得適中。</p>
<p></p>
<p></p>
<p><a href="/downloads/exam1.zip">exam1.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/gk1sXl53TVc" width="560"></iframe></p>
<h2>Exam2</h2>
<p>Exam2 (10%): 利用 CAD 零組件建立模擬場景</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號</p>
<p></p>
<p>1.先利用solvespace 繪製出四邊形，link1為142（42為學號後兩碼）、link2為180、link3為200、兩base的距離為220，並繪製起始角度為42度<br/>2.分別繪製base1、base2、link1、link2、link3<br/>3.將零件進行組合（存成stl）<br/>4.把組合後的stl 利用程式轉換成obj 順便將單位轉換<br/>5.開啟webots <br/>6.新增Robot<br/>7.在Robot新增base1、base2、joint1、joint4<br/>8.利用CadShape分別將所需的零件匯入webots <br/>9.joint2需要建立在joint1下<br/>10.joint3需要建立在joint2下<br/>11.在joint1下建立馬達<br/>12.joint1 joint2 joint3下的boundingObject 新增Mesh並選擇零件<br/>13.開啟physics <br/>14.利用solvespace量測出接點的xy 距離輸入進anchor （joint2的x =1.05 y =0.95、joint3的x =2.53 y =1.97<br/>15.joint4下的solidReference 選擇link3<br/>16.更改joint4下的anchor為2.2、0、0<br/>17.將每個axis變更為0、0、1<br/>18.robot下的controller選擇fourbar</p>
<p>影片44:24後為重新繪製零件圖，因為發現link2的圖形繪製錯誤，所以重新繪製與轉檔，開啟製作完成的exam2的webots 檔案，因該修改的參數都已經修改完成，所以只要將原本的零件檔案變更成新繪製的零件檔案就完成了</p>
<p></p>
<p>exam2的操作與HW2的操作是差不多的，都是先將零件的外型尺寸利用solvespace繪製，再將其組裝，組裝完成後存成stl 利用程式將檔案轉換成obj ，開啟webots 新增base1 base2 joint1 joint4，修改其內部的數值，joint2新增在joint1下，joint3新增在joint2下，把相對應的零件匯入至對應的位置。其中我在轉換檔案時，沒有注意到我把程式內檔案名稱後面的stl 刪除了，導致一直無法轉換檔案，看了幾次後終於發現問題，也順利的解決了。</p>
<p><a href="/downloads/exam2.zip">exam2.zip</a></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/0h8207gchSo" width="560"></iframe></p>
<h2>Exam3</h2>
<p>Exam3 (20%): Webots 機電模擬場景的協同設計</p>
<p>操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號</p>
<p></p>
<p>1.先到<a href="https://mde.tw/cd2025/content/IPv6.html">https://mde.tw/cd2025/content/IPv6.html</a>下的<a href="https://mde.tw/cd2025/downloads/w4_2b_index.txt">https://mde.tw/cd2025/downloads/w4_2b_index.txt</a>找到自己的ipv6</p>
<p>2.打開控制台</p>
<p>3.點選網路和共用中心</p>
<p>4.乙太網路</p>
<p>5.內容更改ipv6</p>
<p>6.<span>打開cmd 打入</span><span>webot --stream  "檔案路徑\檔名.wbt</span></p>
<p>7.<span>打開webots後，用瀏覽器開啟此連結<a href="http://localhost:1234/index.html">http://localhost:1234/index.html</a><a href="http://localhost:1234/index.html"></a></span></p>
<p>8.<span>按connect確認是否有與webots連上</span></p>
<p>9.<span>將原本上面的ws://localhost:1234改成ws://[自己的ipv6]:1234</span></p>
<p>10.有跑出webots的畫面代表成功</p>
<p></p>
<p></p>
<p>心得</p>
<p>剛開始看到Exam3的內容文字敘述時，我不知道該如何操作，後面請教同學經過同學的解說與教導，才懂得如何操作，整體就是卡在不知如何串流，就是在串流部分卡比較久。</p>
<p></p>
<p>Exam3-1</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/e8L3YEZ20GY" width="560"></iframe></p>
<p></p>
<p></p>
<p></p>
<p>Exam3-2</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/eW8FpHmrOQk" width="560"></iframe></p>
<p></p>
<p></p>
<p>Exam3-3</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/xO6gzwr941c" width="560"></iframe></p>
<p></p>
<p><span>下面影片為3部影片的合輯</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/ymUFc_OYftQ" width="560"></iframe></p>
<h1>Final</h1>
<p><span>期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%)</span></p>
<p><span>題目: <span style="background-color: #ccffcc;">Webots 動態投籃模擬系統的協同設計</span></span></p>
<p><span>說明: </span></p>
<p style="padding-left: 30px;"><span>籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上.</span></p>
<p style="padding-left: 30px;"><span>操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止.</span></p>
<p>請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中.</p>
<p>影片標題: <span style="background-color: #ffff00;">國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題<br/></span></p>
<p><span style="background-color: #ffff00;"></span></p>
<p></p>
<p>投籃機的製作</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/XJKW-hnE6LA" width="560"></iframe></p>
<p></p>
<p><span>籃球框的製作</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/GXt4dAlM3Hk" width="560"></iframe></p>
<p>因原本的投籃機和籃框尺寸太大，所以更換為小尺寸的<span>投籃機和籃框</span></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/yToxAddR4Pw" width="560"></iframe></p>
<p></p>
<p>利用前後左右控制投籃機的位置，按下A產生一顆球，按下M把球擊出，按K使投籃機恢復。</p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/sLrVgRNu3hY" width="560"></iframe></p>
<p></p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/_e4yQMa-a70" width="560"></iframe></p>
<p></p>
<p><a href="/downloads/Final1.7z">Final1.7z</a></p>
<p><a href="/downloads/White Blue Simple Modern Enhancing Sales Strategy Presentation (2).pdf">期末報告</a></p>
<p></p>
<p><a href="/downloads/Final.7z">Final.7z</a>(最終的完成檔案)</p>
<p><a href="/downloads/WEBOTS 動態投籃機.pdf">期末報告</a>(更新後的報告)</p>
<p></p>
<p></p>
<p></p>
<p><span class="OYPEnA font-feature-liga-off font-feature-clig-off font-feature-calt-off text-decoration-none text-strikethrough-none">在這個學期使用webots 來製作與模擬，要學習一個新的事物並非想像中的輕鬆，在練習的過程中也是遇到了許多的困難，從一開始最基本的四連桿模擬，到後來的投籃機的製作，都是一步一步慢慢練習學習才有的結果，在使用webots 時，一旦有出現一個錯誤的設定的地方或是沒有設定到的地方就沒辦法進行模擬，常常就一直在裡面找哪裡設定錯誤，很多的設定都是有前後關係的，花了蠻多的時間在除錯，在這堂課中，讓我學到了很多，要不斷的去認識新事物不能一直安於現狀，雖然學習新事物不是很簡單的事情，但只要有耐心都是可以學會的只是要花較長的時間。</span></p><h2>程式</h2>
<h3>投籃機和車</h3>
<pre class="brush:py;toolbar:false" contenteditable="false">from controller import Robot, Keyboard

# === 常數設定 ===
TIME_STEP = 32                             # 每個模擬時間步長（毫秒）
MAX_VELOCITY = 10.0                        # 輪子的最大速度
ANGLE_STEP = 40 * 3.14159 / 180            # 將40度轉換成弧度，約 0.698 rad
POSITION_M = ANGLE_STEP                    # 馬達轉到 +40 度的位置
POSITION_K = 0.0                           # 馬達轉回 0 度的位置

# === 初始化機器人與鍵盤 ===
robot = Robot()                            # 建立 Webots 中的機器人實例
timestep = int(robot.getBasicTimeStep())   # 取得 Webots 建議的時間步長
keyboard = Keyboard()                      # 建立鍵盤控制器
keyboard.enable(timestep)                  # 啟用鍵盤控制

# === 嘗試取得馬達與感測器 ===
try:
    motor = robot.getDevice('motor1')         # 取得名為 'motor1' 的馬達
    sensor = robot.getDevice('motor1_sensor') # 取得馬達的位置感測器
    sensor.enable(timestep)                   # 啟用感測器
    mechanism_enabled = True                  # 設定馬達控制可用
except Exception:
    mechanism_enabled = False                 # 若找不到裝置，關閉功能

# === 嘗試取得四個輪子 ===
try:
    wheels = [robot.getDevice(f"wheel{i+1}") for i in range(4)]  # 取得 'wheel1'~'wheel4'
    for wheel in wheels:
        wheel.setPosition(float('inf'))       # 設為無限位置，啟用速度控制模式
        wheel.setVelocity(0)                  # 一開始速度設為0
    platform_enabled = True                   # 啟用平台移動功能
except Exception:
    platform_enabled = False                  # 找不到輪子就關閉平台功能

# === 狀態與按鍵觸發狀態控制 ===
current_state = "allow_m"                     # 初始狀態允許按下 'm'
key_pressed = {                               # 用來防止長按重複觸發
    'k': False,
    'm': False
}

# === 主控制迴圈 ===
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 取得當前鍵盤按鍵（ASCII碼或方向鍵常數）

    # === 平台移動控制 ===
    if platform_enabled:
        if key == Keyboard.UP:
            for wheel in wheels:
                wheel.setVelocity(MAX_VELOCITY)  # 所有輪子向前
        elif key == Keyboard.DOWN:
            for wheel in wheels:
                wheel.setVelocity(-MAX_VELOCITY) # 所有輪子向後
        elif key == Keyboard.LEFT:
            # 左轉：左右輪相反轉
            wheels[0].setVelocity(MAX_VELOCITY)
            wheels[1].setVelocity(-MAX_VELOCITY)
            wheels[2].setVelocity(MAX_VELOCITY)
            wheels[3].setVelocity(-MAX_VELOCITY)
        elif key == Keyboard.RIGHT:
            # 右轉：左右輪相反轉
            wheels[0].setVelocity(-MAX_VELOCITY)
            wheels[1].setVelocity(MAX_VELOCITY)
            wheels[2].setVelocity(-MAX_VELOCITY)
            wheels[3].setVelocity(MAX_VELOCITY)
        elif key == ord('Q') or key == ord('q'):
            print("Exiting...")
            break  # 按下 Q 鍵跳出迴圈結束模擬
        else:
            for wheel in wheels:
                wheel.setVelocity(0)  # 沒按方向鍵就停止

    # === 馬達控制（M / K 鍵切換） ===
    if mechanism_enabled:
        _current_motor_position = sensor.getValue()  # 可用於偵錯但此程式沒用上

        # 按下 M：轉到 +40 度
        if key == ord('M') or key == ord('m'):
            if not key_pressed['m'] and current_state == "allow_m":
                motor.setPosition(POSITION_M)       # 馬達設定目標位置
                current_state = "allow_k"           # 下一次只能按 k
            key_pressed['m'] = True
        else:
            key_pressed['m'] = False                # 沒按時重設按鍵狀態

        # 按下 K：轉回 0 度
        if key == ord('K') or key == ord('k'):
            if not key_pressed['k'] and current_state == "allow_k":
                motor.setPosition(POSITION_K)
                current_state = "allow_m"           # 下一次允許按 m
            key_pressed['k'] = True
        else:
            key_pressed['k'] = False
</pre>
<p><br/><br/></p><h3>supervisor Robots</h3>
<pre class="brush:py;toolbar:false" contenteditable="false">from controller import Supervisor, Keyboard
import time
import random
import numpy as np
import re

# ----------------- 基本參數區 -----------------
HOOP_CENTER = [0.622, -0.103, 0.742838]        # 籃框中心座標（可用於擴充得分偵測）
BALL_DEF_PATTERN = re.compile(r"Sphere_\d+")  # 用來匹配球的 DEF 名稱

supervisor = Supervisor()                     # 建立 Supervisor
timestep = int(supervisor.getBasicTimeStep()) # 模擬步長
keyboard = Keyboard()                         # 鍵盤控制器
keyboard.enable(timestep)

# 球與軌跡點設定
sphere_radius = 0.1
TRAJECTORY_POINT_RADIUS = 0.03
TRAJECTORY_POINT_STEP = 0.12
TRAJECTORY_MAX_POINTS = 5                     # 最多5個軌跡點

# 追蹤狀態參數
waiting_ball_def = None
waiting_ball_info = None
current_tracked_def = None
trajectory_points = []

# 時間與按鍵防抖設定
last_key_time = 0
debounce_time = 0.5
default_feed_pos = (-0.35, 0.0, 0.9)           # youbot 前方球起始點
last_print_time = time.time()
PRINT_INTERVAL = 0.2

# ----------------- 輔助函式區 -----------------

# 轉換 youbot 的局部座標為世界座標
def axis_angle_to_rotation_matrix(axis, angle):
    x, y, z = axis
    c = np.cos(angle)
    s = np.sin(angle)
    C = 1 - c
    return np.array([
        [x*x*C + c,   x*y*C - z*s, x*z*C + y*s],
        [y*x*C + z*s, y*y*C + c,   y*z*C - x*s],
        [z*x*C - y*s, z*y*C + x*s, z*z*C + c]
    ])

def youbot_local_to_world(local_pos):
    youbot_node = supervisor.getFromDef('youbot')
    if youbot_node is None:
        raise RuntimeError("找不到 DEF 為 youbot 的 Robot 物件")
    youbot_translation = np.array(youbot_node.getField('translation').getSFVec3f())
    youbot_rotation = youbot_node.getField('rotation').getSFRotation()
    youbot_axis = youbot_rotation[:3]
    youbot_angle = youbot_rotation[3]
    youbot_rot_mat = axis_angle_to_rotation_matrix(youbot_axis, youbot_angle)
    rotated = youbot_rot_mat @ np.array(local_pos)
    world_pos = youbot_translation + rotated
    return tuple(world_pos)

# 隨機產生不重複的 DEF 名稱
def generate_valid_def_name(base_name="Sphere"):
    timestamp = int(supervisor.getTime() * 1000)
    return f"{base_name}_{timestamp}_{random.randint(0, 10000)}"

# 隨機顏色
def generate_random_color():
    return random.random(), random.random(), random.random()

# ----------------- 球與軌跡點建立 -----------------

def create_static_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
    }}
    """
    supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_string)

def create_dynamic_ball(def_name, world_pos, r, g, b):
    sphere_string = f"""
    DEF {def_name} Solid {{
      translation {world_pos[0]} {world_pos[1]} {world_pos[2]}
      contactMaterial "ball"
      children [
        Shape {{
          geometry Sphere {{
            radius {sphere_radius}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor {r} {g} {b}
            }}
          }}
        }}
      ]
      boundingObject Sphere {{
        radius {sphere_radius}
      }}
      physics Physics {{
        mass 0.01
        density -1
      }}
    }}
    """
    supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_string)

def create_trajectory_point(pos):
    def_name = generate_valid_def_name("TrajectoryPt")
    sphere_string = f"""
    DEF {def_name} Transform {{
      translation {pos[0]} {pos[1]} {pos[2]}
      children [
        Shape {{
          geometry Sphere {{
            radius {TRAJECTORY_POINT_RADIUS}
          }}
          appearance Appearance {{
            material Material {{
              diffuseColor 1 0.7 0
              transparency 0.3
            }}
          }}
        }}
      ]
    }}
    """
    supervisor.getRoot().getField("children").importMFNodeFromString(-1, sphere_string)
    return def_name

def delete_trajectory_points():
    global trajectory_points
    for _, def_name in trajectory_points:
        node = supervisor.getFromDef(def_name)
        if node:
            node.remove()
    trajectory_points.clear()

# ----------------- 控制球生成與擊出 -----------------

def create_static_sphere(supervisor, x, y, z):
    global waiting_ball_def, waiting_ball_info
    def_name = generate_valid_def_name()
    waiting_ball_def = def_name
    r, g, b = generate_random_color()
    world_pos = youbot_local_to_world((x, y, z))
    waiting_ball_info = (world_pos, r, g, b)
    create_static_ball(def_name, world_pos, r, g, b)

def activate_dynamic_ball():
    global waiting_ball_def, waiting_ball_info
    if waiting_ball_def is None or waiting_ball_info is None:
        return
    ball_node = supervisor.getFromDef(waiting_ball_def)
    if ball_node is not None:
        ball_node.remove()
        supervisor.step(int(supervisor.getBasicTimeStep()))
    world_pos, r, g, b = waiting_ball_info
    create_dynamic_ball(waiting_ball_def, world_pos, r, g, b)
    waiting_ball_def = None
    waiting_ball_info = None

def is_ball_landed(pos, threshold_z=0.13):
    return pos[2] &lt; threshold_z

# ----------------- 主控制流程 -----------------

print("按 A 產生一顆靜止球，按 M 讓球變 dynamic 可擊出（最多只有5個軌跡點跟著球跑，球落地後軌跡自動消失）")

while supervisor.step(timestep) != -1:
    key = keyboard.getKey()
    current_time = time.time()

    # 產生靜止球
    if key == ord('A') and (current_time - last_key_time &gt;= debounce_time):
        if waiting_ball_def is None:
            create_static_sphere(supervisor, *default_feed_pos)
            current_tracked_def = waiting_ball_def
            delete_trajectory_points()
        else:
            print("還有一顆球等待擊出，請先擊出再產生新球。")
        last_key_time = current_time

    # 擊球（轉為動態）
    if key == ord('M') and (current_time - last_key_time &gt;= debounce_time):
        activate_dynamic_ball()
        last_key_time = current_time

    # 拋物線追蹤與軌跡點
    if current_tracked_def is not None:
        ball_node = supervisor.getFromDef(current_tracked_def)
        if ball_node is not None:
            pos = ball_node.getPosition()
            if current_time - last_print_time &gt;= PRINT_INTERVAL:
                last_print_time = current_time
            if (not trajectory_points) or np.linalg.norm(np.array(pos) - np.array(trajectory_points[-1][0])) &gt; TRAJECTORY_POINT_STEP:
                def_name = create_trajectory_point(pos)
                trajectory_points.append((pos, def_name))
                if len(trajectory_points) &gt; TRAJECTORY_MAX_POINTS:
                    _, old_def = trajectory_points.pop(0)
                    node = supervisor.getFromDef(old_def)
                    if node:
                        node.remove()
            if is_ball_landed(pos):
                delete_trajectory_points()
        else:
            delete_trajectory_points()
            current_tracked_def = None
</pre>
<p><span style="background-color: #ffff00;"><br/></span></p>
<p><span style="background-color: #ffff00;"></span></p>
<p></p>
<p>按A產生一顆新球，按M把球擊出。</p><h3>stand youbots</h3>
<p></p>
<pre class="brush:py;toolbar:false" contenteditable="false">from controller import Robot, Keyboard

# === 機器人設定參數 ===
WHEEL_RADIUS = 0.1  # 輪子半徑 (單位: 公尺)
L = 0.471           # 機器人長度一半
W = 0.376           # 機器人寬度一半
MAX_VELOCITY = 10.0 # 最大輪速

# === 初始化機器人與裝置 ===
robot = Robot()
timestep = int(robot.getBasicTimeStep())

# 得分發射器
emitter = robot.getDevice("score_emitter")
score_to_send = 2  # 每次得分傳送的分數

# 紅外線距離感測器
sensor = robot.getDevice('sensor')
sensor.enable(timestep)

# 鍵盤初始化
keyboard = Keyboard()
keyboard.enable(timestep)

# 四顆輪子（以機器人右前、左前、右後、左後順序）
wheel5 = robot.getDevice("wheel5")
wheel6 = robot.getDevice("wheel6")
wheel7 = robot.getDevice("wheel7")
wheel8 = robot.getDevice("wheel8")

for wheel in [wheel5, wheel6, wheel7, wheel8]:
    wheel.setPosition(float('inf'))  # 啟用速度控制模式
    wheel.setVelocity(0)

# 設定輪速函式
def set_wheel_velocity(v1, v2, v3, v4):
    wheel5.setVelocity(v1)
    wheel6.setVelocity(v2)
    wheel7.setVelocity(v3)
    wheel8.setVelocity(v4)

# === 紅外線感測 AD值對應距離表 ===
lookup_table = [
    (1000, 0.00),
    (620, 0.12),
    (372, 0.13),
    (248, 0.14),
    (186, 0.15),
    (0, 0.18)
]

# 根據 AD值做線性插值換算為距離
def ad_to_distance(ad_value):
    for i in range(len(lookup_table)-1):
        a0, d0 = lookup_table[i]
        a1, d1 = lookup_table[i+1]
        if a1 &lt;= ad_value &lt;= a0:
            return d0 + (d1 - d0) * (ad_value - a0) / (a1 - a0)
    if ad_value &gt; lookup_table[0][0]:
        return lookup_table[0][1]
    return lookup_table[-1][1]

# === 主要狀態 ===
score = 0
last_score_time = 0
cooldown = 1.0  # 每次得分之間的冷卻時間（秒）

# === 說明提示 ===
print("Use 'E', 'X', 'S', 'D' keys to control the robot.")
print("E: Move forward, X: Move backward, S: Turn left, D: Turn right.")
print("Press 'Q' to quit.")

# === 主迴圈 ===
while robot.step(timestep) != -1:
    key = keyboard.getKey()  # 讀取按鍵
    sensor_value = sensor.getValue()
    distance = ad_to_distance(sensor_value)
    current_time = robot.getTime()

    # 測試模式：按 M 或 K 可印出距離
    if key == ord('M') or key == ord('m') or key == ord('K') or key == ord('k'):
        print(distance)

    # 得分偵測邏輯：當球進入一定距離範圍
    if distance &lt; 0.11 and (current_time - last_score_time) &gt; cooldown:
        score += score_to_send
        print("得分")
        print(distance)
        emitter.send(str(score_to_send).encode('utf-8'))  # 傳送得分訊息
        last_score_time = current_time

    # === 鍵盤操控 ===
    if key == ord('E') or key == ord('e'):
        set_wheel_velocity(MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY, MAX_VELOCITY)  # 前進
    elif key == ord('X') or key == ord('x'):
        set_wheel_velocity(-MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY, -MAX_VELOCITY)  # 後退
    elif key == ord('D') or key == ord('d'):
        set_wheel_velocity(-MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY)  # 右轉
    elif key == ord('S') or key == ord('s'):
        set_wheel_velocity(MAX_VELOCITY, -MAX_VELOCITY, MAX_VELOCITY, -MAX_VELOCITY)  # 左轉
    elif key == ord('Q') or key == ord('q'):
        print("Exiting...")
        break
    else:
        set_wheel_velocity(0, 0, 0, 0)  # 沒按鍵則停止
</pre>
<p>E前進X後退S左D右</p><h3>counter supervisor</h3>
<p><span style="background-color: #ffff00;"></span></p>
<pre class="brush:py;toolbar:false" contenteditable="false">from controller import Supervisor

# === 七段顯示器段數定義：SEGMENTS[d] 表示數字 d 應該亮哪些段 ===
SEGMENTS = [
    [1,1,1,1,1,1,0], # 0：六段亮
    [0,1,1,0,0,0,0], # 1
    [1,1,0,1,1,0,1], # 2
    [1,1,1,1,0,0,1], # 3
    [0,1,1,0,0,1,1], # 4
    [1,0,1,1,0,1,1], # 5
    [1,0,1,1,1,1,1], # 6
    [1,1,1,0,0,0,0], # 7
    [1,1,1,1,1,1,1], # 8
    [1,1,1,1,0,1,1], # 9
]

# === 三位數七段顯示器材質名稱對應（用 DEF 名稱尋找 Material node）===
# 每一位的七段順序為：a~g
DIGIT_MATERIALS = [
    ['a3mat', 'b3mat', 'c3mat', 'd3mat', 'e3mat', 'f3mat', 'g3mat'], # 百位
    ['a2mat', 'b2mat', 'c2mat', 'd2mat', 'e2mat', 'f2mat', 'g2mat'], # 十位
    ['a1mat', 'b1mat', 'c1mat', 'd1mat', 'e1mat', 'f1mat', 'g1mat'], # 個位
]

# === 顯示顏色設定 ===
ON_COLOR = [0, 1, 0]          # 綠色（亮）
OFF_COLOR = [0.05, 0.05, 0.05]# 暗色（關閉）

# === 將某一位數設為指定數字 ===
def set_digit(supervisor, digit_index, value):
    segs = SEGMENTS[value]  # 取得該數字需要亮的段
    for i, seg_on in enumerate(segs):
        mat_node = supervisor.getFromDef(DIGIT_MATERIALS[digit_index][i])
        if mat_node:
            mat_node.getField('diffuseColor').setSFColor(ON_COLOR if seg_on else OFF_COLOR)
        else:
            print(f"找不到 {DIGIT_MATERIALS[digit_index][i]} 這個DEF")

# === 將整個顯示器設定為三位數的數值（0~999）===
def set_display(supervisor, value):
    value = max(0, min(999, int(value)))  # 限制範圍為0~999
    h = value // 100                      # 百位數
    t = (value // 10) % 10                # 十位數
    u = value % 10                        # 個位數
    set_digit(supervisor, 0, h)
    set_digit(supervisor, 1, t)
    set_digit(supervisor, 2, u)

# === 初始化 Supervisor 與接收器 ===
supervisor = Supervisor()
timestep = int(supervisor.getBasicTimeStep())

score = 0  # 初始化得分
receiver = supervisor.getDevice("score_receiver")
receiver.enable(timestep)

# === 主控制迴圈：每次模擬步驟都接收資料並更新顯示 ===
while supervisor.step(timestep) != -1:
    while receiver.getQueueLength() &gt; 0:
        data = receiver.getString()
        if data.isdigit():  # 確認訊息是純數字
            try:
                received_score = int(data)
                score += received_score
                print(f"收到得分訊息: +{received_score}, 總分: {score}")
            except Exception as e:
                print("訊息格式錯誤:", e)
        receiver.nextPacket()
    set_display(supervisor, score)  # 更新顯示器
</pre>
<p><span style="background-color: #ffff00;"><br/></span></p><h1>Brython</h1>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>