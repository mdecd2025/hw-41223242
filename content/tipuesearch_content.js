var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站:\xa0 https://mdecd2025.github.io/hw-41223242 \n 學員作業倉儲:\xa0 https://github.com/mdecd2025/hw-41223242 \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'repo', 'text': '\n', 'tags': '', 'url': 'repo.html'}, {'title': 'Task', 'text': '\n', 'tags': '', 'url': 'Task.html'}, {'title': 'task1', 'text': '修改 start_ipv6.bat, 利用 Search - Replace, Find 欄位填上 Python311, Replace 欄位填上 Python313 後, 按下 Replace All, 便可將啟動檔中所有 Python311 設定改為 Python313, 另存修改後的檔案為 start_python313.bat,關閉 start_ipv6.bat 開啟的可攜系統, 改以心建立的 start_python313.bat 開啟可攜環境, 之後在命令列輸入 python, 確認目前的 Python 版本為 3.13.2 後, 利用 Ctrl + z 退出 Python 後, 利用 pip list 確認目前的 Python 3.13.2 系統尚未配置 pip 模組管理工具 \n \n \n \n', 'tags': '', 'url': 'task1.html'}, {'title': 'task2', 'text': '', 'tags': '', 'url': 'task2.html'}, {'title': 'List', 'text': 'G2 list \n \n', 'tags': '', 'url': 'List.html'}, {'title': 'task3', 'text': '\n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '\n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'task4.html'}, {'title': 'task5', 'text': '', 'tags': '', 'url': 'task5.html'}, {'title': 'w7', 'text': '\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'task6', 'text': '\n \n \n \n \n \n \n', 'tags': '', 'url': 'task6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n \n webots fourbar.7z \n fourbar_controller.7z \n fourbar1.zip \n 在進行操作練習時遇到多次問題，當無法自行解決時，我透過詢問 ChatGPT 並參考同學的操作影片，逐步修正錯誤，最終順利完成操作。 \n', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': 'HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW2 - 學員學號 \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n fourbar2.zip \n \n HW2的內容操作與HW1的操作是差不多的，不同的地方在於要先將零件用solvespace繪製，再將零件進行組裝存成stl，stl轉成obj，開啟webots將零件一個一個加入進webots中，但整體操作起來是比HW1簡單一點。 \n', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': 'HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW3 - 學員學號 \n \n \n 在製作的過程中因一直在模擬時發生問題，所以將floor(地板）和外牆與籃球框移除重新製作（重新製作的過程影片於影片中的39:26開始） \n \n \n HW3的做法與HW2的做法類似，都是先在solvespace 把零件繪製完成，再將組合後的零件存成stl，將stl的檔案轉換成obj 後，開啟webots 建立Robot，在Robot下加入solid(base)和兩個hingejoint ，剩下的做法與HW2相似加入零件與修改內部數值，不一樣的地方在於需要多加ball與籃球框和地板，我覺得在整體的實際操作上比HW2還要難上一點，花了蠻多的時間才成功做出來。 \n \n \n \n \n', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: python313、小組名單list、四連桿繪製、投籃機繪製 \n 各週網頁內容: python 313 、 List 、 四連桿 、 投籃機 \n 期中心得:我覺得在這學期學的內容比較困難，在進度都落後老師教的，需要花更多的時間多加練習，尤其是在webots要更努力。 \n 期中自評影片: \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam1 - 學員學號 \n \n \n 1.先加入Robot 2.在Robot下的children 加入Solid（名稱改為base)再加入兩個HingeJoint(一個名稱改為joint1另一個名稱改為joint4) 3.在base下的children加入Shape 4.在Shape下的geometry加入Box大小為1、0.1、0.1、appearance下修改顏色（先暫時用成白色） 5.在joint1下的endPoint加入Solid（並改名為link1) 6.在Solid下的children加入Pose 7.在Pose下的children加入Shape 8.在Shape下的geometry加入Box大小為0.4、0.1、0.1、appearance下修改顏色，顏色改為紅色 9.在Pose下的translation更改數值0.2、0、0 10.在Solid下的translation更改數值-0.5、0、0.1 11.修改Solid(link1)下的rotation (學號後兩碼42，42degree=0.73303829rad) 12.在Solid(link1)下的bounding加入Pose，在children下加入Box，修改尺寸0.4、0.1、0.1，並修改translation 0.2、0、0 13.開啟physics 14.在Solid(link1)下的children加入HingeJoint(與Pose同一階)，並改名為joint2 15.在joint1下的endPoint加入Solid（並改名為link2) 16.在Solid下的children加入兩個Pose 17.在Pose下的children加入Shape 18.在Shape下的geometry加入Box大小為0.6、0.1、0.1、appearance下修改顏色，顏色改為綠色 19.在Pose下的translation更改數值0.3、0、0 20.在Pose下的children加入Shape 21.在Shape下的geometry加入Box大小為0.1、0.3、0.1、appearance下修改顏色，顏色改為綠色，並更改Pose下的translation0.3，0.15，0 22.在Solid下的translation更改數值0.4、0、0.1 23.修改Solid(link2)下的rotation (由solvespace繪圖，推算出角度為160.2，180-160.2=19.8，19.8degree=0.34557519rad) 24.在Solid(link2)下的bounding加入Pose，在children下加入Box，修改尺寸0.6、0.1、0.1，並修改translation 0.3、0、0 25.開啟physics 26.在Solid(link2)下的children加入HingeJoint(與Pose同一階)，並改名為joint3 27.在joint3下的endPoint加入Solid（並改名為link3) 28.在Solid下的children加入Pose 29.在Pose下的children加入Shape 30.在Shape下的geometry加入Box大小為0.9、0.1、0.1、appearance下修改顏色，顏色改為藍色 31.在Pose下的translation更改數值0.45、0、0 32.在Solid下的translation更改數值0.6、0、-0.1 33.修改Solid(link3)下的rotation (由solvespace繪圖，推算出角度為55.94，180-55.96=124.04，124.04degree=2.1649064rad) 34.在Solid(link3)下的bounding加入Pose，在children下加入Box，修改尺寸0.9、0.1、0.1，並修改translation 0.45、0、0 35.開啟physics 36.在joint1下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor-0.5、0、0 37.在joint1下的device加入RotationalMotor，並將name改成motor 38.在joint2下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.4、0、0 39.在joint3下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.6、0、0 40.在joint4下的endPoint加入SolidReference，並選擇link3 41.在joint4下的jointParameters加入HingeJointParameters，修改axis0、0、1，修改anchor0.5、0、0 42.到Robot下的controller選擇fourbar controller 43將base改成透明 44.按下開始 45.完成 \n \n exam1在整體的操作上與HW1是差不多的，建立box與修改顏色、內部的數值，只有在link2的部分圖形是不一樣的，另外還要注意紅色桿（link1）的起始角度要設定為學號後兩碼，另外在base的部分需要將base隱藏，整體的難度我覺得適中。 \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': 'Exam2 (10%): 利用 CAD 零組件建立模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam2 - 學員學號 \n \n 1.先利用solvespace 繪製出四邊形，link1為142（42為學號後兩碼）、link2為180、link3為200、兩base的距離為220，並繪製起始角度為42度 2.分別繪製base1、base2、link1、link2、link3 3.將零件進行組合（存成stl） 4.把組合後的stl 利用程式轉換成obj 順便將單位轉換 5.開啟webots  6.新增Robot 7.在Robot新增base1、base2、joint1、joint4 8.利用CadShape分別將所需的零件匯入webots  9.joint2需要建立在joint1下 10.joint3需要建立在joint2下 11.在joint1下建立馬達 12.joint1 joint2 joint3下的boundingObject 新增Mesh並選擇零件 13.開啟physics  14.利用solvespace量測出接點的xy 距離輸入進anchor （joint2的x =1.05 y =0.95、joint3的x =2.53 y =1.97 15.joint4下的solidReference 選擇link3 16.更改joint4下的anchor為2.2、0、0 17.將每個axis變更為0、0、1 18.robot下的controller選擇fourbar \n 影片44:24後為重新繪製零件圖，因為發現link2的圖形繪製錯誤，所以重新繪製與轉檔，開啟製作完成的exam2的webots 檔案，因該修改的參數都已經修改完成，所以只要將原本的零件檔案變更成新繪製的零件檔案就完成了 \n \n exam2的操作與HW2的操作是差不多的，都是先將零件的外型尺寸利用solvespace繪製，再將其組裝，組裝完成後存成stl 利用程式將檔案轉換成obj ，開啟webots 新增base1 base2 joint1 joint4，修改其內部的數值，joint2新增在joint1下，joint3新增在joint2下，把相對應的零件匯入至對應的位置。其中我在轉換檔案時，沒有注意到我把程式內檔案名稱後面的stl 刪除了，導致一直無法轉換檔案，看了幾次後終於發現問題，也順利的解決了。 \n \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};